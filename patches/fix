Bottom: d03d5749c8ebac39c59de8a64bbdf822d35937f6
Top:    ef847cc23eb8909bf1d63f37c619c3261c659138
Author: Igor Stoppa <igor.stoppa@gmail.com>
Date:   2018-03-31 22:15:49 +0400

fix


---

diff --git a/include/linux/pmalloc.h b/include/linux/pmalloc.h
index 07d7838f7877..1c24067eb167 100644
--- a/include/linux/pmalloc.h
+++ b/include/linux/pmalloc.h
@@ -42,7 +42,7 @@
 #define PMALLOC_REFILL_DEFAULT (0)
 #define PMALLOC_ALIGN_DEFAULT ARCH_KMALLOC_MINALIGN
 
-struct pmalloc_pool *pmalloc_create_custom_pool(unsigned long int refill,
+struct pmalloc_pool *pmalloc_create_custom_pool(size_t refill,
 						unsigned short align_order);
 
 /**
diff --git a/mm/pmalloc.c b/mm/pmalloc.c
index f659e9006df1..e124d7537b25 100644
--- a/mm/pmalloc.c
+++ b/mm/pmalloc.c
@@ -27,9 +27,9 @@ struct pmalloc_pool {
 	struct mutex mutex;
 	struct list_head pool_node;
 	struct llist_head vm_areas;
-	unsigned long refill;
-	unsigned long offset;
-	unsigned long align;
+	size_t refill;
+	size_t offset;
+	size_t align;
 };
 
 static LIST_HEAD(pools_list);
@@ -84,8 +84,8 @@ static inline bool protected(struct pmalloc_pool *pool)
 
 static inline bool exhausted(struct pmalloc_pool *pool, size_t size)
 {
-	unsigned long space_before;
-	unsigned long space_after;
+	size_t space_before;
+	size_t space_after;
 
 	space_before = round_down(pool->offset, pool->align);
 	space_after = pool->offset - space_before;
@@ -113,7 +113,7 @@ static inline bool space_needed(struct pmalloc_pool *pool, size_t size)
  * * pointer to the new pool	- success
  * * NULL			- error
  */
-struct pmalloc_pool *pmalloc_create_custom_pool(unsigned long refill,
+struct pmalloc_pool *pmalloc_create_custom_pool(size_t refill,
 						unsigned short align_order)
 {
 	struct pmalloc_pool *pool;
@@ -174,7 +174,7 @@ static unsigned long reserve_mem(struct pmalloc_pool *pool, size_t size)
  */
 void *pmalloc(struct pmalloc_pool *pool, size_t size)
 {
-	unsigned long retval = 0;
+	size_t retval = 0;
 
 	mutex_lock(&pool->mutex);
 	if (unlikely(space_needed(pool, size)) &&
