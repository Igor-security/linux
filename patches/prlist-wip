Bottom: 9c8f3f920c57c5bd311b226c5c0a0f2c45d34b29
Top:    c01690954c065eac76e21f93b746dc4244ab8187
Author: Igor Stoppa <igor.stoppa@huawei.com>
Date:   2018-05-26 12:40:15 +0300

prlist wip


---

diff --git a/include/linux/prlist.h b/include/linux/prlist.h
new file mode 100644
index 000000000000..77a5a18acacb
--- /dev/null
+++ b/include/linux/prlist.h
@@ -0,0 +1,82 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * prlist.h: Header for Protectable Double Linked List
+ *
+ * (C) Copyright 2018 Huawei Technologies Co. Ltd.
+ * Author: Igor Stoppa <igor.stoppa@huawei.com>
+ */
+
+#ifndef _LINUX_PRLIST_H
+#define _LINUX_PRLIST_H
+
+#include <linux/pmalloc.h>
+#include <linux/list.h>
+#include <linux/kernel.h>
+
+struct prlist_pool {
+	struct pmalloc_pool pool;
+};
+
+struct prlist_head {
+	struct list_head list;
+};
+
+static __always_inline
+struct prhead *list_to_prlist(struct list_head *list)
+{
+return NULL;
+	//	return container_of(list, struct prhead, list);
+}
+
+struct prlist_pool
+*prlist_create_custom_pool(size_t refill, unsigned short align_order);
+
+static inline
+struct prlist_pool *prlist_create_pool(void)
+{
+	return prlist_create_custom_pool(PMALLOC_REFILL_DEFAULT,
+					 PMALLOC_ALIGN_ORDER_DEFAULT);
+}
+
+static inline void *prlist_alloc(struct prlist_pool *pool, size_t size)
+{
+	return pmalloc(&pool->pool, size);
+}
+
+static inline void INIT_PRLIST_HEAD(struct prlist_pool *pool,
+				    struct prlist_head *head)
+{
+	void *pippo = &head->list;
+	pmalloc_rare_write(&pool->pool, &head->list.next, &pippo,
+			   sizeof(&head->list.next));
+}
+/*
+static __always_inline
+void prlist_set_next(struct prlist_head *head, struct list_head *next)
+{
+}
+
+static inline struct prot_head *PROT_LIST_HEAD(struct prot_list_pool *pool)
+{
+	struct prot_head *head;
+
+	head = pmalloc(&pool->pool, sizeof(struct prot_head));
+	if (WARN(!head, "Could not allocate protected list head."))
+		return NULL;
+	INIT_PROT_LIST_HEAD(pool, head);
+	return head;
+
+}
+
+static inline
+void prot_list_add(struct list_head *new, struct list_head *head)
+{
+	__prot_list_add();
+}
+
+static inline
+void prot_list_add_tail(struct list_head *new, struct list_head *head)
+{
+}
+*/
+#endif
diff --git a/include/linux/prot_list.h b/include/linux/prot_list.h
deleted file mode 100644
index 90d6fa2441ef..000000000000
--- a/include/linux/prot_list.h
+++ /dev/null
@@ -1,102 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * prot_list.h: Header for Protectable Double Linked List
- *
- * (C) Copyright 2018 Huawei Technologies Co. Ltd.
- * Author: Igor Stoppa <igor.stoppa@huawei.com>
- */
-
-#ifndef _LINUX_PROT_LIST_H
-#define _LINUX_PROT_LIST_H
-
-#include <linux/pmalloc.h>
-#include <linux/list.h>
-#include <linux/kernel.h>
-
-struct prot_list_pool {
-	struct pmalloc_pool pool;
-};
-
-struct prot_head {
-	struct list_head list;
-};
-
-static inline struct prot_head *list_to_prot(struct list_head *list)
-{
-	return container_of(list, struct prot_head, list);
-}
-
-struct prot_list_pool
-*prot_list_create_custom_pool(size_t refill, unsigned short align_order);
-
-static inline
-struct prot_list_pool *prot_list_create_pool(void)
-{
-	return prot_list_create_custom_pool(PMALLOC_REFILL_DEFAULT,
-					    PMALLOC_ALIGN_ORDER_DEFAULT);
-}
-
-static inline void INIT_PROT_LIST_HEAD(struct prot_list_pool *pool,
-				       struct prot_head *list)
-{
-	struct prot_head head = {LIST_HEAD_INIT(list->list)};
-
-	pmalloc_rare_write(&pool->pool, list, &head,
-			   sizeof(struct prot_head));
-}
-
-static inline struct prot_head *PROT_LIST_HEAD(struct prot_list_pool *pool)
-{
-	struct prot_head *head;
-
-	head = pmalloc(&pool->pool, sizeof(struct prot_head));
-	if (WARN(!head, "Could not allocate protected list head."))
-		return NULL;
-	INIT_PROT_LIST_HEAD(pool, head);
-	return head;
-
-}
-
-#define prot_list_append(pool, head, src, node) \
-	__prot_list_add(pool, head, src, sizeof(*src), \
-			((uintptr_t)&(src)->node) - (uintptr_t)(src))
-
-#define	prot_list_prepend(pool, head, src, node)			\
-	__prot_list_add(pool,						\
-			list_to_prot((head)->list.prev),		\
-			(src), sizeof(*(src)),				\
-			((uintptr_t)&(src)->node) - (uintptr_t)(src))
-
-static inline bool __prot_list_add(struct prot_list_pool *pool,
-				   struct prot_head *head,
-				   void *src, size_t src_size,
-				   uintptr_t offset)
-{
-	void *dst;
-	bool retval;
-	struct prot_head *src_list;
-	void *p;
-
-	dst = pmalloc(&pool->pool, src_size);
-	if (WARN(!head, "Could not allocate protected list head."))
-		return false;
-	mutex_lock(&pool->pool.mutex);
-	src_list = src + offset;
-	src_list->list.prev = &head->list;
-	src_list->list.next = head->list.next;
-	retval = pmalloc_rare_write(&pool->pool, dst, src, src_size);
-	if (WARN(!retval, "Failed to init list element."))
-		goto out;
-	p = (void *)(offset + (uintptr_t)dst);
-	retval = pmalloc_rare_write(&pool->pool, &head->list.next->prev, &p,
-				      sizeof(p));
-	if (WARN(!retval, "Failed to hook to next element."))
-		goto out;
-	retval = pmalloc_rare_write(&pool->pool, &head->list.next, &p, sizeof(p));
-	if (WARN(!retval, "Failed to hook to previous element."))
-		goto out;
-out:
-	mutex_unlock(&pool->pool.mutex);
-	return retval;
-}
-#endif
diff --git a/lib/Makefile b/lib/Makefile
index d949af6c1b2a..4ad867cc61a6 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -265,4 +265,4 @@ obj-$(CONFIG_GENERIC_LSHRDI3) += lshrdi3.o
 obj-$(CONFIG_GENERIC_MULDI3) += muldi3.o
 obj-$(CONFIG_GENERIC_CMPDI2) += cmpdi2.o
 obj-$(CONFIG_GENERIC_UCMPDI2) += ucmpdi2.o
-obj-$(CONFIG_PROTECTABLE_MEMORY) += prot_list.o
+obj-$(CONFIG_PROTECTABLE_MEMORY) += prlist.o
diff --git a/lib/prot_list.c b/lib/prlist.c
similarity index 50%
rename from lib/prot_list.c
rename to lib/prlist.c
index 20eacbac6cad..457dd3aaaddc 100644
--- a/lib/prot_list.c
+++ b/lib/prlist.c
@@ -1,23 +1,23 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * prot_list.c: protected double linked list
+ * prlist.c: Protected Double Linked List
  *
  * (C) Copyright 2018 Huawei Technologies Co. Ltd.
  * Author: Igor Stoppa <igor.stoppa@huawei.com>
  */
 
-#include <linux/prot_list.h>
+#include <linux/prlist.h>
 
-struct prot_list_pool *prot_list_create_custom_pool(size_t refill,
-						    unsigned short align_order)
+struct prlist_pool *prlist_create_custom_pool(size_t refill,
+					      unsigned short align_order)
 {
-	struct prot_list_pool *pool;
+	struct prlist_pool *pool;
 
-	pool = kzalloc(sizeof(struct prot_list_pool), GFP_KERNEL);
+	pool = kzalloc(sizeof(struct prlist_pool), GFP_KERNEL);
 	if (WARN(!pool, "Could not allocate pool meta data."))
 		return NULL;
 	pmalloc_init_custom_pool(&pool->pool, refill, align_order,
 				 PMALLOC_AUTO_RW);
 	return pool;
 }
-EXPORT_SYMBOL(prot_list_create_custom_pool);
+EXPORT_SYMBOL(prlist_create_custom_pool);
