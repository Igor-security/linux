Bottom: 1e07a927e1e96ccc0a9aa4455d7d3a99ebad434f
Top:    5216457960805e15fcf57b7c4e9f1b25f6df5667
Author: Igor Stoppa <igor.stoppa@huawei.com>
Date:   2018-05-20 14:41:47 +0300

Rename __safe_cmp to __safe_eval

The macro __safe_cmp is not really related to the cmp operation, even if
it was crafted for supporting it.

Instead, it can be used in much broader context, to prevent side effects
due to re-evaluating the parameters of a macro.

For this purpose, it can be renamed to a more neutral "__safe_eval", which
is what it really does.

Signed-off-by: Igor Stoppa <igor.stoppa@huawei.com>


---

diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index 941dc0a5a877..93d5c14a9007 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -822,7 +822,7 @@ static inline void ftrace_dump(enum ftrace_dump_mode oops_dump_mode) { }
 #define __no_side_effects(x, y) \
 		(__is_constexpr(x) && __is_constexpr(y))
 
-#define __safe_cmp(x, y) \
+#define __safe_eval(x, y) \
 		(__typecheck(x, y) && __no_side_effects(x, y))
 
 #define __cmp(x, y, op)	((x) op (y) ? (x) : (y))
@@ -833,7 +833,7 @@ static inline void ftrace_dump(enum ftrace_dump_mode oops_dump_mode) { }
 		__cmp(unique_x, unique_y, op); })
 
 #define __careful_cmp(x, y, op) \
-	__builtin_choose_expr(__safe_cmp(x, y), \
+	__builtin_choose_expr(__safe_eval(x, y), \
 		__cmp(x, y, op), \
 		__cmp_once(x, y, __UNIQUE_ID(__x), __UNIQUE_ID(__y), op))
